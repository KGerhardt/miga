#!/usr/bin/env ruby
#
# @package MiGA
# @author Luis M. Rodriguez-R <lmrodriguezr at gmail dot com>
# @license artistic license 2.0
# @update May-27-2015
#

$:.push File.expand_path(File.dirname(__FILE__) + '/../lib')
require 'miga/project'
require 'miga/taxonomy'
require 'optparse'

ARGV << '-h' if ARGV.size==0
o = {:q=>true}
OptionParser.new do |opt|
   opt.banner = <<BAN
Registers taxonomic information for datasets.

Usage: #{$0} [options]
BAN
   opt.separator ""
   opt.on("-P", "--project PATH", "(Mandatory) Path to the project to use."){ |v| o[:project]=v }
   opt.on("-D", "--dataset PATH", "(Mandatory unless -t is provided) ID of the dataset to use."){ |v| o[:dataset]=v }
   opt.on("-s", "--tax-string STRING", "(Mandatory unless -t is provided) String corresponding to the dataset's taxonomy.",
      "The MiGA format of string taxonomy is a space-delimited set of 'rank:name' pairs."){ |v| o[:taxstring]=v }
   opt.on("-t", "--tax-file PATH", "(Mandatory unless -D and -s are provided) Tab-delimited file containing datasets taxonomy.",
      "Each row corresponds to a datasets and each column corresponds to a rank (blanks permitted).",
      "The first row must be a header with the rank names, and the first column must contain dataset names."){ |v| o[:taxfile]=v }
   opt.on("-v", "--verbose", "Print additional information to STDERR."){ o[:q]=false }
   opt.on("-h", "--help", "Display this screen.") do
      puts opt
      exit
   end
   opt.separator ""
end.parse!


### MAIN
begin
   raise "-P is mandatory." if o[:project].nil?
   raise "-D is mandatory unless -t is provided." if o[:dataset].nil? and o[:taxfile].nil?
   raise "-s is mandatory unless -t is provided." if o[:taxstring].nil? and o[:taxfile].nil?
   
   $stderr.puts "Loading project." unless o[:q]
   p = MiGA::Project.load(o[:project])
   raise "Impossible to load project: #{o[:project]}" if p.nil?

   if not o[:taxfile].nil?
      $stderr.puts "Reading tax-file and registering taxonomy." unless o[:q]
      tfh = File.open(o[:taxfile], "r")
      header = tfh.gets.chomp.split /\t/
      header.shift
      while ln = tfh.gets
	 r = ln.chomp.split /\t/
	 d = p.dataset r.shift
	 d.metadata[:tax] = MiGA::Taxonomy.new(r, header)
	 d.save
      end
      tfh.close
   else
      $stderr.puts "Registering taxonomy." unless o[:q]
      d = p.dataset o[:dataset]
      d.metadata[:tax] = MiGA::Taxonomy.new(o[:taxstring])
   end
   
   $stderr.puts "Done." unless o[:q]
rescue => err
   $stderr.puts "Exception: #{err}\n\n"
   err.backtrace.each { |l| $stderr.puts l + "\n" }
   err
end


