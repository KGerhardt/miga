#!/usr/bin/env ruby
#
# @package MiGA
# @author Luis M. Rodriguez-R <lmrodriguezr at gmail dot com>
# @license artistic license 2.0
# @update Jun-16-2015
#

$:.push File.expand_path(File.dirname(__FILE__) + '/../lib')
require 'miga'
require 'miga/daemon'
require 'optparse'

if ARGV.size==0
   ARGV << '-h' unless ['-h','--help'].include? ARGV[0]
else
   task = ARGV.shift
end

o = {:q=>true, :update=>false, :daemon_opts=>[]}
OptionParser.new do |opt|
   opt.banner = <<BAN
Controls the daemon of an MiGA project.

Usage: #{$0} #{File.basename(__FILE__)} {task} [options]
BAN
   opt.separator "task:"
   opt.separator "    start                            Start an instance of the application."
   opt.separator "    stop                             Stop all instances of the application."
   opt.separator "    restart                          Stop all instances and restart them afterwards."
   opt.separator "    reload                           Send a SIGHUP to all instances of the application."
   opt.separator "    run                              Start the application and stay on top."
   opt.separator "    zap                              Set the application to a stopped state."
   opt.separator "    status                           Show status (PID) of application instances."
   opt.separator ""
   opt.separator "MiGA options:"
   opt.on("-P", "--project PATH", "(Mandatory) Path to the project to create."){ |v| o[:project]=v }
   opt.on(      "--latency INT", "Number of seconds the daemon will be sleeping."){ |v| o[:latency]=v.to_i }
   opt.on(      "--max-jobs INT", "Maximum number of jobs to use simultaneously."){ |v| o[:maxjobs]=v.to_i }
   opt.on(      "--ppn INT", "Maximum number of cores to use in a single job."){ |v| o[:ppn]=v.to_i }
   opt.on("-v", "--verbose", "Print additional information to STDERR."){ o[:q]=false }
   opt.on("-d", "--debug INT", "Print debugging information to STDERR."){ |v| v.to_i>1 ? MiGA::MiGA.DEBUG_TRACE_ON : MiGA::MiGA.DEBUG_ON }
   opt.on("-h", "--help", "Display this screen.") do
      puts opt
      exit
   end
   opt.separator ""
   opt.separator "Daemon options:"
   opt.on("-t", "--ontop", "Stay on top (does not daemonize)"){ o[:daemon_opts] << '-t' }
   opt.on("-f", "--force", "Force operation"){ o[:daemon_opts] << '-f' }
   opt.on("-n", "--no_wait", "Do not wait for processes to stop"){ o[:daemon_opts] << '-n' }
end.parse!

### MAIN
begin
   raise "Project is mandatory." if o[:project].nil?
   
   raise "Project doesn't exist, aborting." unless MiGA::Project.exist? o[:project]
   p = MiGA::Project.new(o[:project])
   d = MiGA::Daemon.new(p)
   [:latency, :maxjobs, :ppn].each do |k|
      d.runopts(k, o[k]) unless o[k].nil?
   end
   d.daemon(task, o[:daemon_opts])
rescue => err
   $stderr.puts "Exception: #{err}\n\n"
   err.backtrace.each { |l| $stderr.puts l + "\n" }
   err
end


