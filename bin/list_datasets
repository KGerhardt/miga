#!/usr/bin/env ruby
#
# @package MiGA
# @author Luis M. Rodriguez-R <lmrodriguezr at gmail dot com>
# @license artistic license 2.0
# @update May-10-2015
#

$:.push File.expand_path(File.dirname(__FILE__) + '/../lib')
require 'miga/project'
require 'optparse'

ARGV << '-h' if ARGV.size==0
o = {:q=>true, :info=>false }
OptionParser.new do |opt|
   opt.banner = <<BAN
Lists all registered datasets in an MiGA project.

Usage: #{$0} [options]
BAN
   opt.separator ""
   opt.on("-P", "--project PATH", "(Mandatory) Path to the project to read."){ |v| o[:project]=v }
   opt.on("-D", "--dataset STRING", "ID of the dataset to read."){ |v| o[:dataset]=v }
   opt.on(      "--[no-]ref", "If set, lists only reference (or only non-reference) datasets."){ |v| o[:ref]=v }
   opt.on(      "--[no-]multi", "If set, lists only multi-species (or only single-species) datasets."){ |v| o[:multi]=v }
   opt.on("-i", "--info", "Print additional information on each dataset."){ o[:info]=true }
   opt.on("-d", "--metadata STRING", "Print name and metadata field only. If set, ignores -i."){ |v| o[:datum]=v }
   opt.on("-v", "--verbose", "Print additional information to STDERR."){ o[:q]=false }
   opt.on("-h", "--help", "Display this screen.") do
      puts opt
      exit
   end
   opt.separator ""
end.parse!


### MAIN
begin
   raise "-P is mandatory." if o[:project].nil?
   
   $stderr.puts "Loading project." unless o[:q]
   p = MiGA::Project.load(o[:project])
   raise "Impossible to load project: #{o[:project]}" if p.nil?
   
   $stderr.puts "Listing dataset." unless o[:q]
   ds = p.datasets
   ds.select!{|d| d.name == o[:dataset]} unless o[:dataset].nil?
   ds.select!{|d| d.is_ref? == o[:ref] } unless o[:ref].nil?
   ds.select!{|d| (not d.metadata[:type].nil?) and (MiGA::Dataset.KNOWN_TYPES[d.metadata[:type]][:multi] == o[:multi]) } unless o[:multi].nil?
   if not o[:datum].nil?
      ds.each{|d| puts "#{d.name}\t#{d.metadata[ o[:datum].to_sym ] || "?"}"}
   elsif o[:info]
      header = MiGA::Dataset.INFO_FIELDS.map{|i| i.ljust(25)}.join("  ")
      puts header, header.gsub(/\S/,'-')
      ds.each{|d| puts d.info.map{|i| i.nil? ? "?" : i.to_s}.map{|i| i.ljust(25)}.join("  ") }
   else
      ds.each{|d| puts d.name}
   end

   $stderr.puts "Done." unless o[:q]
rescue => err
   $stderr.puts "Exception: #{err}\n\n"
   err.backtrace.each { |l| $stderr.puts l + "\n" }
   err
end


