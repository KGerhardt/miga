#!/usr/bin/env ruby
#
# @package EGR (codename)
# @author Luis M. Rodriguez-R <lmrodriguezr at gmail dot com>
# @license artistic license 2.0
# @update Mar-12-2015
#

$:.push File.expand_path(File.dirname(__FILE__) + '/../lib')
require 'egr/project'
require 'optparse'

ARGV << '-h' if ARGV.size==0
o = {:q=>true, :remove=>false}
OptionParser.new do |opt|
   opt.banner = <<BAN
Removes a dataset from an EGR project.

Usage: #{$0} [options]
BAN
   opt.separator ""
   opt.on("-P", "--project PATH", "(Mandatory) Path to the project to create."){ |v| o[:project]=v }
   opt.on("-D", "--dataset PATH", "(Mandatory) ID of the dataset to create."){ |v| o[:dataset]=v }
   opt.on("-r", "--remove", "Also remove all associated files. By default, only unlinks from metadata."){ o[:remove]=true }
   opt.on("-v", "--verbose", "Print additional information to STDERR."){ o[:q]=false }
   opt.on("-h", "--help", "Display this screen.") do
      puts opt
      exit
   end
   opt.separator ""
end.parse!


### MAIN
begin
   raise "-P is mandatory." if o[:project].nil?
   raise "-D is mandatory." if o[:dataset].nil?
   
   $stderr.puts "Loading project." unless o[:q]
   p = EGR::Project.load(o[:project])
   raise "Impossible to load project: #{o[:project]}" if p.nil?
   
   $stderr.puts "Unlinking dataset." unless o[:q]
   raise "Dataset doesn't exist, aborting." unless EGR::Dataset.exist?(p, o[:dataset])
   d = p.unlink_dataset(o[:dataset])
   d.remove! if o[:remove]

   $stderr.puts "Done." unless o[:q]
rescue => err
   $stderr.puts "Exception: #{err}\n\n"
   err.backtrace.each { |l| $stderr.puts l + "\n" }
   err
end


