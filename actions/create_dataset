#!/usr/bin/env ruby
#
# @package MiGA
# @author  Luis M. Rodriguez-R <lmrodriguezr at gmail dot com>
# @license artistic license 2.0
# @update  Nov-29-2015
#

o = {q:true, ref:true}
OptionParser.new do |opt|
   opt.banner = <<BAN
Creates an empty dataset in a pre-existing MiGA project.

Usage: #{$0} #{File.basename(__FILE__)} [options]
BAN
   opt.separator ""
   opt.on("-P", "--project PATH",
      "(Mandatory) Path to the project to use."){ |v| o[:project]=v }
   opt.on("-D", "--dataset STRING",
      "(Mandatory) ID of the dataset to create."){ |v| o[:dataset]=v }
   opt.on("-t", "--type STRING",
      "Type of dataset. Recognized types include:",
      *MiGA::Dataset.KNOWN_TYPES.map{ |k,v| "~ #{k}: #{v[:description]}"}
      ){ |v| o[:type]=v.to_sym }
   opt.on("-q", "--query",
      "If set, the dataset is registered as a query, not a reference dataset."
      ){ |v| o[:ref]=!v }
   opt.on("-d", "--description STRING",
      "Description of the dataset."){ |v| o[:description]=v }
   opt.on("-u", "--user STRING",
      "Owner of the dataset."){ |v| o[:user]=v }
   opt.on("-c", "--comments STRING",
      "Comments on the dataset."){ |v| o[:comments]=v }
   opt.on("-v", "--verbose", 
      "Print additional information to STDERR."){ o[:q]=false }
   opt.on("-d", "--debug INT", "Print debugging information to STDERR.") do |v|
      v.to_i>1 ? MiGA::MiGA.DEBUG_TRACE_ON : MiGA::MiGA.DEBUG_ON
   end
   opt.on("-h", "--help", "Display this screen.") do
      puts opt
      exit
   end
   opt.separator ""
end.parse!


### MAIN
raise "-P is mandatory." if o[:project].nil?
raise "-D is mandatory." if o[:dataset].nil?

$stderr.puts "Loading project." unless o[:q]
p = MiGA::Project.load(o[:project])
raise "Impossible to load project: #{o[:project]}" if p.nil?

$stderr.puts "Creating dataset." unless o[:q]
md = {}
[:type, :description, :user, :comments].each{ |k| md[k]=o[k] unless o[k].nil? }
d = MiGA::Dataset.new(p, o[:dataset], o[:ref], md)
p.add_dataset(o[:dataset])

$stderr.puts "Done." unless o[:q]

